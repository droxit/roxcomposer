# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  test:
    docker:
      - image: droxops/roxcomposer-node-py:0.0.5

    working_directory: ~/repo

    steps:
      # checkout the code of the branch from github, which triggers the build
      - checkout

      - restore_cache:
          keys:
            - python-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - python-dependencies-
            - node-dependency-cache-{{ checksum "roxconnector_plugin/package.json" }}
            - node-dependency-cache-

      - run:
          name: Relink python3 binaries
          command: |
            rm -f /usr/bin/python3
            ln -s /usr/bin/python3.6 /usr/bin/python3
            rm -f /usr/bin/pip3
            ln -s /usr/bin/pip3.6 /usr/bin/pip3

      - run:
          name: Install python dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip3 install -r requirements.txt

      - run:
          name: Install node dependencies
          working_directory: roxconnector_plugin
          command: npm install

      - save_cache:
          paths:
            - ./venv
          key: python-dependencies-{{ checksum "requirements.txt" }}

      - save_cache:
          key: node-dependency-cache-{{ checksum "roxconnector_plugin/package.json" }}
          paths:
            - ./node_modules

      - run:
          name: Install roxcomposer locally
          command: |
            . venv/bin/activate
            pip3 install -e .

      ### run automatic tests
      - run:
          name: Run tests
          command: |
            . venv/bin/activate
            make test
  build_and_deploy:
    docker:
      - image: droxops/roxcomposer-node-py:0.0.5

    working_directory: ~/repo
    steps:
      # build demo package
      - run:
          name: Create demo package
          command:
            make demo-package

      ### artifacts
      - store_artifacts:
          path: packages
          destination: packages

      ### deployment
      # deploy to gru
      - deploy:
          name: Deploy to gru
          command: |
            export roxcomposer_folder='/opt/artifacts/roxcomposer/dev'
            if [ $CIRCLE_BRANCH == 'master' ]; then export roxcomposer_folder='/opt/artifacts/roxcomposer/release'; fi
            scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ./build/roxcomposer*.tar.gz devpi@176.9.144.37:$roxcomposer_folder

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - test
      - build_and_deploy:
          context: artifacts
          filters:
            branches:
              only: /^(master|dev)$/


